<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Namespaces>
  <Namespace Name="SmartHealth.Infrastructure">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'SmartHealth.Infrastructure' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="SmartHealth.Infrastructure.Bussiness">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'SmartHealth.Infrastructure.Bussiness' with another namespace.</Issue>
    </Message>
    <Message Id="Bussiness" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bussiness' in namespace name 'SmartHealth.Infrastructure.Bussiness'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="SmartHealth.Infrastructure.Domain.DataInterfaces">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'SmartHealth.Infrastructure.Domain.DataInterfaces' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="SmartHealth.Infrastructure.Domain.Events">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'SmartHealth.Infrastructure.Domain.Events' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="SmartHealth.Infrastructure.Domain.Validation">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'SmartHealth.Infrastructure.Domain.Validation' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="SmartHealth.Infrastructure.Security">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'SmartHealth.Infrastructure.Security' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="E:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\bin\Debug\SmartHealth.Infrastructure.dll">
   <Modules>
    <Module Name="smarthealth.infrastructure.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'SmartHealth.Infrastructure.dll' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'SmartHealth.Infrastructure.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="SmartHealth.Infrastructure">
       <Types>
        <Type Name="NotFoundException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NotFoundException': protected NotFoundException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'NotFoundException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ProvidersHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InstantiateProvider(System.Configuration.ProviderSettings,System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="ProvidersHelper.cs" Line="27">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ProvidersHelper.InstantiateProvider(ProviderSettings, Type)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="ProvidersHelper.cs" Line="18">In externally visible method 'ProvidersHelper.InstantiateProvider(ProviderSettings, Type)', validate parameter 'providerSettings' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="ProvidersHelper.cs" Line="25">In externally visible method 'ProvidersHelper.InstantiateProvider(ProviderSettings, Type)', validate parameter 'providerType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InstantiateProviders(System.Configuration.ProviderSettingsCollection,System.Configuration.Provider.ProviderCollection,System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="ProvidersHelper.cs" Line="44">In externally visible method 'ProvidersHelper.InstantiateProviders(ProviderSettingsCollection, ProviderCollection, Type)', validate parameter 'providerSettings' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="ProvidersHelper.cs" Line="46">In externally visible method 'ProvidersHelper.InstantiateProviders(ProviderSettingsCollection, ProviderCollection, Type)', validate parameter 'providers' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TimeSpanHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'TimeSpanHelper' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Parse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="8">In member 'TimeSpanHelper.Parse(string)', consider replacing the data type identifier 'String' in parameter name 'timeSpanString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="15">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="15">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="15">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="20">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="20">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="20">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="20">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="26">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="31">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TimeSpanHelper.Parse(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure" File="TimeSpanHelper.cs" Line="11">In externally visible method 'TimeSpanHelper.Parse(string)', validate parameter 'timeSpanString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Bussiness">
       <Types>
        <Type Name="IService`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IService&lt;T&gt;'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IServiceWithTypedId`2" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'IServiceWithTypedId&lt;T, IdT&gt;', prefix generic type parameter name 'IdT' with 'T'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Delete(!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IServiceWithTypedId&lt;T, IdT&gt;.Delete(T, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete`1(!!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IServiceWithTypedId&lt;T, IdT&gt;.Delete&lt;U&gt;(U, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Delete&lt;U&gt;(U, bool)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Delete&lt;U&gt;(U, bool)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Evict`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Evict&lt;U&gt;(U)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Evict&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAll(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAll(Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAll`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, bool&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderBy(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderBy`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderByDescending(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderByDescending`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IServiceWithTypedId&lt;T, IdT&gt;.Get(IdT)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Get&lt;U&gt;(IdT)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Get&lt;U&gt;(IdT)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IServiceWithTypedId&lt;T, IdT&gt;.Get&lt;U&gt;(IdT)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAll`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetAll&lt;U&gt;()', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetAll&lt;U&gt;()', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderBy(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderBy(Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderBy`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderByDescending(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderByDescending(Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderByDescending`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetQuery`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetQuery&lt;U&gt;()', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.GetQuery&lt;U&gt;()', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load`1(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Load&lt;U&gt;(IdT)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Load&lt;U&gt;(IdT)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IServiceWithTypedId&lt;T, IdT&gt;.Save(T, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save`1(!!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IServiceWithTypedId&lt;T, IdT&gt;.Save&lt;U&gt;(U, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Save&lt;U&gt;(U, bool)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.Save&lt;U&gt;(U, bool)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveOrUpdate(!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate(T, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveOrUpdate`1(!!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate&lt;U&gt;(U, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate&lt;U&gt;(U, bool)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate&lt;U&gt;(U, bool)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ServiceWithTypedId`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'ServiceWithTypedId&lt;T, IdT&gt;', prefix generic type parameter name 'IdT' with 'T'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Delete(!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="199">Replace method 'ServiceWithTypedId&lt;T, IdT&gt;.Delete(T, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete`1(!!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="178">Replace method 'ServiceWithTypedId&lt;T, IdT&gt;.Delete&lt;U&gt;(U, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="178">On method 'ServiceWithTypedId&lt;T, IdT&gt;.Delete&lt;U&gt;(U, bool)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Evict`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="209">On method 'ServiceWithTypedId&lt;T, IdT&gt;.Evict&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAll`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="105">On method 'ServiceWithTypedId&lt;T, IdT&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderBy`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="110">On method 'ServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderByDescending`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="115">On method 'ServiceWithTypedId&lt;T, IdT&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="35">On method 'ServiceWithTypedId&lt;T, IdT&gt;.Get&lt;U&gt;(IdT)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAll`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="65">On method 'ServiceWithTypedId&lt;T, IdT&gt;.GetAll&lt;U&gt;()', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderBy`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="80">On method 'ServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderByDescending`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="85">On method 'ServiceWithTypedId&lt;T, IdT&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetQuery`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="55">On method 'ServiceWithTypedId&lt;T, IdT&gt;.GetQuery&lt;U&gt;()', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load`1(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="45">On method 'ServiceWithTypedId&lt;T, IdT&gt;.Load&lt;U&gt;(IdT)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="120">Replace method 'ServiceWithTypedId&lt;T, IdT&gt;.Save(T, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save`1(!!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="125">Replace method 'ServiceWithTypedId&lt;T, IdT&gt;.Save&lt;U&gt;(U, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="125">On method 'ServiceWithTypedId&lt;T, IdT&gt;.Save&lt;U&gt;(U, bool)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveOrUpdate(!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="149">Replace method 'ServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate(T, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveOrUpdate`1(!!0,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="154">Replace method 'ServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate&lt;U&gt;(U, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Bussiness" File="Service.cs" Line="154">On method 'ServiceWithTypedId&lt;T, IdT&gt;.SaveOrUpdate&lt;U&gt;(U, bool)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Caching">
       <Types>
        <Type Name="CacheManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Get`1(System.String,System.Func`1&lt;!!0&gt;,SmartHealth.Infrastructure.Caching.CacheDuration)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Caching" File="CacheManager.cs" Line="42">In externally visible method 'CacheManager.Get&lt;T&gt;(string, Func&lt;T&gt;, CacheDuration)', validate parameter 'funcIfNull' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CacheProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Get(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'CacheProvider.Get(string)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.String,System.Object,System.TimeSpan)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Set" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'CacheProvider.Set(string, object, TimeSpan)' so that it no longer conflicts with the reserved language keyword 'Set'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MemoryCacheProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Initialize(System.String,System.Collections.Specialized.NameValueCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Caching" File="MemoryCacheProvider.cs" Line="22">In externally visible method 'MemoryCacheProvider.Initialize(string, NameValueCollection)', validate parameter 'config' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Domain.DataInterfaces">
       <Types>
        <Type Name="IDbContext" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Evict(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IDbContext.Evict(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRepository`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IRepository&lt;T&gt;'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IRepositoryWithTypedId`2" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Delete`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Delete&lt;U&gt;(U)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Delete&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Evict`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Evict&lt;U&gt;(U)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Evict&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAll(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAll(Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAll`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, bool&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAll&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderBy(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderBy(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderBy(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderBy`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderByDescending(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderByDescending(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderByDescending(Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAllOrderByDescending`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.FindAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, bool&gt;&gt;, Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IRepositoryWithTypedId&lt;T, TId&gt;.Get(TId)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Get&lt;U&gt;(TId)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Get&lt;U&gt;(TId)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IRepositoryWithTypedId&lt;T, TId&gt;.Get&lt;U&gt;(TId)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAll`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAll&lt;U&gt;()', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAll&lt;U&gt;()', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderBy(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderBy(Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderBy`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderBy&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderByDescending(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderByDescending(Expression&lt;Func&lt;T, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllOrderByDescending`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;U, object&gt;&gt;'.</Issue>
            </Message>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetAllOrderByDescending&lt;U&gt;(Expression&lt;Func&lt;U, object&gt;&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetQuery`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetQuery&lt;U&gt;()', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.GetQuery&lt;U&gt;()', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load`1(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Load&lt;U&gt;(TId)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Load&lt;U&gt;(TId)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Save&lt;U&gt;(U)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Save&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveOrUpdate`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.SaveOrUpdate&lt;U&gt;(U)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.SaveOrUpdate&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnProxy(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Un' in member name 'IRepositoryWithTypedId&lt;T, TId&gt;.UnProxy(T)' by changing it to 'UN'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Update`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Update&lt;U&gt;(U)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepositoryWithTypedId&lt;T, TId&gt;.Update&lt;U&gt;(U)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Domain.Events">
       <Types>
        <Type Name="DomainEvents" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Raise`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Domain\Events" File="DomainEvents.cs" Line="33">'action', a variable, is cast to type 'Action&lt;T&gt;' multiple times in method 'DomainEvents.Raise&lt;T&gt;(T)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Domain\Events" File="DomainEvents.cs" Line="21">Consider making 'DomainEvents.Raise&lt;T&gt;(T)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IDomainEvent" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IDomainEvent'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Domain.Models">
       <Types>
        <Type Name="EntityWithTypedId`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetTypeUnproxied()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Unproxied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Domain\Models" File="EntityWithTypedId.cs" Line="100">Correct the spelling of 'Unproxied' in member name 'EntityWithTypedId&lt;TId&gt;.GetTypeUnproxied()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Domain\Models" File="EntityWithTypedId.cs" Line="100">Change 'EntityWithTypedId&lt;TId&gt;.GetTypeUnproxied()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidatableObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Validatable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Validatable' in type name 'ValidatableObject'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Domain.Validation">
       <Types>
        <Type Name="ValidationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'ValidationException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': protected ValidationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException(String, Exception).</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SmartHealth.Infrastructure.Security">
       <Types>
        <Type Name="HashHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ComputeHash(System.Byte[],SmartHealth.Infrastructure.Security.HashType)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="HashHelper.cs" Line="47">In method 'HashHelper.ComputeHash(byte[], HashType)', call System.IDisposable.Dispose on object 'algorithm' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="HashHelper.cs" Line="50">In method 'HashHelper.ComputeHash(byte[], HashType)', call System.IDisposable.Dispose on object 'algorithm' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="HashHelper.cs" Line="53">In method 'HashHelper.ComputeHash(byte[], HashType)', call System.IDisposable.Dispose on object 'algorithm' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="HashHelper.cs" Line="56">In method 'HashHelper.ComputeHash(byte[], HashType)', call System.IDisposable.Dispose on object 'algorithm' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ComputeHashAndSalt(System.String,System.Int32,SmartHealth.Infrastructure.Security.HashType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="HashHelper.cs" Line="28">In method 'HashHelper.ComputeHashAndSalt(string, int, HashType)', call System.IDisposable.Dispose on object 'random' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToReadableString(System.Byte[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="HashHelper.cs" Line="81">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'HashHelper.ToReadableString(byte[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HashType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SHA1" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHA' in member name 'HashType.SHA1' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SHA256" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHA' in member name 'HashType.SHA256' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SHA512" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHA' in member name 'HashType.SHA512' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RijndaelSimple" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'RijndaelSimple' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Decrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="passPhrase" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="180">In member 'RijndaelSimple.Decrypt(string, string, string, string, int, string, int)', the compound word 'passPhrase' in parameter name 'passPhrase' exists as a discrete term. If your usage is intended to be single word, case it as 'passphrase' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="221">In method 'RijndaelSimple.Decrypt(string, string, string, string, int, string, int)', object 'memoryStream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'memoryStream' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="196">In method 'RijndaelSimple.Decrypt(string, string, string, string, int, string, int)', call System.IDisposable.Dispose on object 'password' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="207">In method 'RijndaelSimple.Decrypt(string, string, string, string, int, string, int)', call System.IDisposable.Dispose on object 'symmetricKey' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="240">Object 'memoryStream' can be disposed more than once in method 'RijndaelSimple.Decrypt(string, string, string, string, int, string, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 240</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="passPhrase" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="63">In member 'RijndaelSimple.Encrypt(string, string, string, string, int, string, int)', the compound word 'passPhrase' in parameter name 'passPhrase' exists as a discrete term. If your usage is intended to be single word, case it as 'passphrase' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="plainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="63">In member 'RijndaelSimple.Encrypt(string, string, string, string, int, string, int)', the compound word 'plainText' in parameter name 'plainText' exists as a discrete term. If your usage is intended to be single word, case it as 'plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="104">In method 'RijndaelSimple.Encrypt(string, string, string, string, int, string, int)', object 'memoryStream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'memoryStream' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="79">In method 'RijndaelSimple.Encrypt(string, string, string, string, int, string, int)', call System.IDisposable.Dispose on object 'password' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="90">In method 'RijndaelSimple.Encrypt(string, string, string, string, int, string, int)', call System.IDisposable.Dispose on object 'symmetricKey' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2013-10-25 16:08:59Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Windows\Working\Projects\SH\src\Infrastructure\SmartHealth.Infrastructure\Security" File="RijndaelSimple.cs" Line="121">Object 'memoryStream' can be disposed more than once in method 'RijndaelSimple.Encrypt(string, string, string, string, int, string, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 121</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
   <Name>Avoid empty interfaces</Name>
   <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
   <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182128(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeDiscreteTerm">In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 240</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MethodTypeParameterMoreMeaningfulName">On method {0}, consider providing a more meaningful name than generic type parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="MethodTypeParameter">On method {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Resolution Name="TypeTypeParameter">On type {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182243(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making {0} an event.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182177(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
